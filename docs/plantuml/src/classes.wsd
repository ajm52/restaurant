@startuml classes

    class simulation {
        -restaurant_ : restaurant
        -parties_ : party[]

        void start()
        void stop()
    }

    class restaurant {
        -kitchen_ : kitchen
        -tablespace_ : tablespace

        tablespace getTablespace()
        kitchen getKitchen()

    }

    class door <<struct>> {
        -flag_ : atomic_flag

        boolean acquire()
        void clear()
    }

    class party {
        -master_ : thread
        -guests_ : guest[]
        -numGuests_ : int

        int guestCount()
        guest[] getGuests()
        boolean enter(r: restaurant)
        boolean exit(r: restaurant,)
    }

    class person {
        -stat_ : status
        -id_ : int

        status getStatus()
        int getId()

    }
    class cook {
        -cooking_ : jobs[]
        -kCounter_ : kitchen_counter
    }
    class server {
        -serving_ : tables[]
        -kCounter_ : kitchen_counter
        -bCounter_ : bar_counter
    }
    class guest {
        boolean enter(r : restaurant)
        boolean leave(r : restaurant)
    }
    class employee {
        -thread_ : thread
    }
    class bartender {
        -bCounter_ : bar_counter
    }
   
    class order {
        -tableId_ : int
        -guestId_ : int
        <<constructor>> order(table: int, guests: int[])
        int getTableID()
        int getGuestID()
    }
    class drink_order {
        <<constructor>> drink_order(table: int, guests: int[], drinks: drink[])
    }
    class food_order {
        <<constructor>> food_order(table: int, guests: int[], grub: food[])
    }
    enum drink {
        WATER
        BEER
        TEA
    }
    enum food {
        FRIES
        CHEESEBURGER
        BURGER
        SOUP
        WINGS
    }
    class status {

    }
    
    class table <<struct>> {
        id_ : int
        isTaken_ : boolean
        cap_ : int    
    }
    class kitchen <<struct>> {
        workers_ : cook[]
    }
    class tablespace <<struct>> {
        tables_ : table[]
        workers_ : servers[]
    }

    class counter <<struct>> {
        in_ : job[]
        out_ : job[]

        boolean submit_job(task: job)
        boolean pull_job()
        boolean submit_result(task: job)
        boolean pull_result()

    }

    class kitchen_counter <<struct>> {

    }

    class bar_counter <<struct>> {

    }

    restaurant *-- "1" tablespace : contains
    restaurant *-- "1" kitchen : contains 
    kitchen *-- "1+" cook : contains 
    tablespace *-- "1+" table : contains
    tablespace *-- "1+" server : waited by
    hide kitchen circle
    hide tablespace circle
    person <|-- guest
    employee <|-- cook
    employee <|-- server
    employee <|-- bartender
    person <|-- employee
    order <|-- food_order
    order <|-- drink_order

    guest "1+" --* party : are apart of
    server "1+" o-- "1+" table : serves

    
@enduml